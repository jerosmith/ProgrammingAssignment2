license()
getwd()
source("setwd.R")
source("setwd.R")
getwd()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ls()
x <- 1:1000
z <- makeVector()
get()
z$get()
z$set(x)
z$get()
x
x <- 1
x
z$get()
z$get()
environment()
environment(z$get)
sys.frames
parent.frame(z$get)
parent.frame(1)
parent.frame(2)
environment(z$get)
ls(environment(z$get))
get(m, ls(environment(z$get)))
get(m, (environment(z$get))
get(m, (environment(z$get)))
get(m, (environment(z$get)))
get(m, environment(z$get))
ls(environment(z$get))
get(x, environment(z$get))
get("x", environment(z$get))
get("m", environment(z$get))
ls(environment(z$get))
ls(environment(z$get))
environment(z$get)
test <- function(x) {x*x}
test(3)
test(5)
envirnoment(test)
environment(test)
environment(z$get)
parent.frame(environment(z$get))
parent.env(environment(z$get))
x <- matrix()
x
dim(x)
x[1,1]
x[2,1]
x[1,2]
x[1,1]
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
z <- makeVector()
z
x <- 1:100
x
z$set(x)
cachemean(z)
cachemean(z)
source('C:/A/2 University/Coursera/2 R Programming/Programming Assignments/Assignment 2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
## Returns a list of four functions, to cache and retrieve a matrix and its inverse.
i <- NULL
set <- function(y) {  ## Stores matrix 'x'.
x <<- y
i <<- NULL
}
get <- function() x  ## Retrieves matrix 'x'.
setinverse <- function(inverse) i <<- inverse  ## Intended for the inverse of 'x' (matrix 'i'). Stores matrix 'i'.
getinverse <- function() i  ## Retrieves the stored inverse matrix 'i'.
list(set = set, get = get,  ## Returns the list of four functions.
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(z, ...) {
## Returns a matrix that is the inverse of the matrix stored in list 'z'.
i <- z$getinverse()  ## Retrieves the matrix stored in the cache.
if(!is.null(i)) {  ## If the cache is not empty, returns the cache.
message("getting cached data")
return(i)
}
data <- z$get()  ## Otherwise retrieves the matrix in the store,
i <- solve(data, ...)  ## computes the inverse of the matrix,
z$setinverse(i)  ## and stores it in the cache for next time.
i  ## Finally, returns the inverse, regardless of whether it came from the cache or was computed.
}
x <- matrix(1:100, 10, 10)
x
z <- makeCacheMatrix()
z
z$set(x)
z$get()
cacheSolve(z)
x <- matrix(rep(1,100), 10, 10)
x
z$set(x)
z$get()
cacheSolve(z)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(100)
abs(rnorm(100))
abs(rnorm(100))*100
as.integer(abs(rnorm(100))*100)
x <- matrix(as.integer(abs(rnorm(100))*100), 10, 10)
x
z$set(x)
z$get()
cacheSolve(z)
y <- cacheSolve(z)
y <- cacheSolve(z)
x %*% y
y <- apply(y, as.integer)
y <- apply(y, as.integer())
y <- apply(y, c(10,10), as.integer())
y <- apply(y, c(10,10), as.integer)
w <- x%*y
w <- x%*%y
x
x
z$set(x)
z$get()
w <- x %*% y
w
y <- cacheSolve(z)
w <- x %*% y
w
w <- sapply(w, asinteger)
w <- sapply(w, as.integer)
w
w[1,]
print(w)
print(w, nrows=10, ncols=10)
w
w[1,1]
dim(w)
class(w)
dim(w) <- c(10,10)
w
